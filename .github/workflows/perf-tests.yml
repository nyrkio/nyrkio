name: Performance Tests
on:
  pull_request:

jobs:
  perf-tests:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "true"

      - name: Run lscpu
        run: lscpu -J > extra_info.json

      # Install poetry and all of the required project dependencies
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: cache poetry install
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.7.1-0
      - uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: cache deps
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}
      - run: cd backend && poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'
      - run: cd backend && poetry install --no-interaction

      - name: Run performance tests
        env:
          NYRKIO_ENV_TESTING: ${{ secrets.NYRKIO_ENV_TESTING }}
          NYRKIO_USERNAME: ${{ secrets.NYRKIO_USERNAME }}
          NYRKIO_PASSWORD: ${{ secrets.NYRKIO_PASSWORD }}
        run: |
          echo "Installing perf"
          sudo apt update
          sudo apt -y install linux-tools-$(uname -r) sysstat
          mpstat -P ALL 5 > mpstat.log &
          cpupower frequency-info
          echo "$NYRKIO_ENV_TESTING" > .env.backend
          echo "Running performance tests..."
          docker compose -f docker-compose.dev.yml up -d
          echo -1 | sudo tee /proc/sys/kernel/perf_event_paranoid
          echo 0 | sudo tee /proc/sys/kernel/kptr_restrict
          cd backend && perf stat -- poetry run pytest --benchmark-disable-gc --benchmark-warmup=on --benchmark-max-time=10 --benchmark-save=results benches/
          cd .. && docker compose -f docker-compose.dev.yml down
          cd backend && poetry run python benches/process_results.py $(find .benchmarks -name "*.json") ../extra_info.json
          cd .. && cat mpstat.log
          kill %1
